#!/bin/zsh

# 用于程序构建，实现多语言、多构建系统的单命令构建

# 如果是一个cmake工程
if [ -f CMakeLists.txt ];then
    CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
    for i ($*) {
        # when not chose thread
        echo "$i" | grep -e '-j' && CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
        # when chose thread
        echo "$i" | grep -e '-j.' && CCLS_THREAD=${i:2}
    }
    if [ ! -d build/Debug ];then
        mkdir -p build/Debug
    fi
    # 创建compile database
    # clangd
    if [ ! -d build-clangd ];then
        mkdir build-clangd
    fi
    # cd build-clangd
    # if [ ! -f Makefile -a ! -f build.ninja ];then
        # LDFLAGS="-L/usr/local/opt/llvm/lib" \
        # CPPFLAGS="-I/usr/local/opt/llvm/include" \
        # cmake \
            # -D CMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang \
            # -D CMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ \
            # -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            # -DCMAKE_BUILD_TYPE=Debug \
            # -G Ninja \ 
            # ..
        # if [ $? -ne 0 ]; then
            # exit 1
        # fi
    # fi
    # cd ..
    if [ ! -f ./build/Debug/Makefile -a ! -f ./build/Debug/build.ninja ];then
        cmake -H. -Bbuild/Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    if [ -f ./build/Debug/Makefile ];then
        make -C ./build/Debug "$@"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    elif [ -f ./build/Debug/build.ninja ];then
        ninja -C ./build/Debug "$@"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    # 创建ccls的cache文件
    ccls -index=./ -init="{\"compilationDatabaseDirectory\":\"./build/Debug\",\"cache\":{\"directory\":\"./.ccls-cache\",\"format\":\"binary\",\"hierarchicalPath\":false,\"retainInMemory\":2},\"highlight\":{\"lsRanges\": true }, \"clang\":{\"extraArgs\":[\"-isystem\",\"/usr/local/opt/llvm/include/c++/v1\"]},\"index\":{\"threads\":12}}"
    if [ $? -ne 0 ]; then
        exit 1
    fi
elif [ -f Makefile ];then
    if [ ! -f compile_commands.json ];then
        bear make "$@"
    else
        make "$@"
    fi
elif [ -f build.ninja ];then
    ninja "$@"
elif [ -f ./configure ];then
    sh ./configure "$@"
elif [ -f ./build.sh ];then
    sh ./build.sh "$@"
elif [ -f autogen.sh ];then
    sh ./autogen.sh "$@"
fi
