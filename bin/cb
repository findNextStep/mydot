#!/bin/zsh

# 用于程序构建，实现多语言、多构建系统的单命令构建

# 如果是一个cmake工程
if [ -f CMakeLists.txt ];then
    CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
    for i ($*) {
        # when not chose thread
        echo "$i" | grep -e '-j' && CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
        # when chose thread
        echo "$i" | grep -e '-j.' && CCLS_THREAD=${i:2}
    }
    if [ ! -d build ];then
        mkdir build
    fi
    cd build
    if [ ! -f Makefile -a ! -f build.ninja ];then
        cmake -D CMAKE_C_COMPILER=clang\
            -D CMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -G Ninja ..
    fi
    if [ -f Makefile ];then
        make "$@"
    elif [ -f build.ninja ];then
        ninja "$@"
    fi
    cd ..
    # 创建ccls的cache文件
    ccls -index=./ -init="{\"compilationDatabaseDirectory\":\"./build\",\"cache\":{\"directory\":\"./.ccls-cache\",\"format\":\"binary\",\"hierarchicalPath\":false,\"retainInMemory\":2},\"clang\":{\"extraArgs\":[\"-isystem\",\"/Library/Developer/CommandLineTools/usr/include/c++/v1\"],\"resourceDir\":\"/usr/local/Cellar/llvm/9.0.0/lib/clang/9.0.0\"},\"index\":{\"threads\":$CCLS_THREAD}}"
elif [ -f Makefile ];then
    if [ ! -f compile_commands.json ];then
        bear make "$@"
    else
        make "$@"
    fi
elif [ -f build.ninja ];then
    ninja "$@"
elif [ -f ./configure ];then
    sh ./configure "$@"
elif [ -f ./build.sh ];then
    sh ./build.sh "$@"
elif [ -f autogen.sh ];then
    sh ./autogen.sh "$@"
fi
