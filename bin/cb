#!/bin/zsh

# 用于程序构建，实现多语言、多构建系统的单命令构建

# 如果是一个cmake工程
if [ -f CMakeLists.txt ];then
    CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
    for i ($*) {
        # when not chose thread
        echo "$i" | grep -e '-j' && CCLS_THREAD=$(cat /proc/cpuinfo | grep "processor" |wc -l)
        # when chose thread
        echo "$i" | grep -e '-j.' && CCLS_THREAD=${i:2}
    }
    if [ ! -d build ];then
        mkdir build
    fi
    # 创建compile database
    # ccls
    if [ ! -d build-ccls ];then
        mkdir build-ccls
    fi
    cd build-ccls
    if [ ! -f Makefile -a ! -f build.ninja ];then
        cmake \
            -D CMAKE_C_COMPILER=clang\
            -D CMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            ..
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    cd ..
    # clangd
    if [ ! -d build-clangd ];then
        mkdir build-clangd
    fi
    cd build-clangd
    if [ ! -f Makefile -a ! -f build.ninja ];then
        CXXFLAGS=-isystem\ /usr/local/Cellar/llvm/9.0.0_1/include/c++/v1\ -Wold-style-cast \
        cmake \
            -D CMAKE_C_COMPILER=/usr/local/Cellar/llvm/9.0.0_1/bin/clang \
            -D CMAKE_CXX_COMPILER=/usr/local/Cellar/llvm/9.0.0_1/bin/clang++ \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            ..
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    cd ..
    cd build
    if [ ! -f Makefile -a ! -f build.ninja ];then
        cmake \
            -D CMAKE_C_COMPILER=clang\
            -D CMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -G Ninja ..
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    if [ -f Makefile ];then
        make "$@"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    elif [ -f build.ninja ];then
        ninja "$@"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi
    cd ..
    # 创建ccls的cache文件
    ccls -index=./ -init="{\"compilationDatabaseDirectory\":\"./build-ccls\",\"cache\":{\"directory\":\"./.ccls-cache\",\"format\":\"binary\",\"hierarchicalPath\":false,\"retainInMemory\":2},\"clang\":{\"extraArgs\":[\"-isystem\",\"/usr/local/Cellar/llvm/9.0.0_1/include/c++/v1\",\"-Wold-style-cast\"],\"resourceDir\":\"/usr/local/Cellar/llvm/9.0.0_1/lib/clang/9.0.0\"},\"index\":{\"threads\":$CCLS_THREAD}}" 2>&1 >/dev/null  | grep parse
    if [ $? -ne 0 ]; then
        exit 1
    fi
elif [ -f Makefile ];then
    if [ ! -f compile_commands.json ];then
        bear make "$@"
    else
        make "$@"
    fi
elif [ -f build.ninja ];then
    ninja "$@"
elif [ -f ./configure ];then
    sh ./configure "$@"
elif [ -f ./build.sh ];then
    sh ./build.sh "$@"
elif [ -f autogen.sh ];then
    sh ./autogen.sh "$@"
fi
